{"version":3,"file":"index-f55a318b.js","sources":["../../src/app.js"],"sourcesContent":["const API_BASE_URL = \"https://api.weatherapi.com/v1/forecast.json\";\nconst API_KEY = \"219a015ee939448aa0f195825231010\";\n\nlet currentPage = 1;\n\n// Function to get the default location from local storage\nconst getDefaultLocation = () => {\n    const defaultLocation = localStorage.getItem(\"defaultLocation\");\n    return defaultLocation || \"Toronto\"; // Default to Toronto if no location is saved\n};\n\n// Function to set the default location in local storage\nconst setDefaultLocation = (location) => {\n    localStorage.setItem(\"defaultLocation\", location);\n};\n\n// Function to fetch weather data\nconst fetchData = async (location) => {\n    const url = `${API_BASE_URL}?key=${API_KEY}&q=${location}&days=1&aqi=no&alerts=no`;\n\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n\n        if (data.error) {\n            throw new Error(data.error.message);\n        }\n\n        return data;\n    } catch (error) {\n        console.error(`Error fetching data for ${location}: ${error.message}`);\n        throw error;\n    }\n};\n\n// Event listener for the form submission\ndocument.getElementById(\"weatherForm\").addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    document.getElementById(\"errorMsg\").style.display = \"none\";\n    document.getElementById(\"loading\").style.display = \"block\";\n\n    const locationInputElement = document.getElementById(\"locationInput\");\n    const locationValue = locationInputElement.value.trim();\n    const location = locationValue;\n\n    if (!location) {\n        document.getElementById(\"errorMsg\").innerText = \"Please provide a location.\";\n        document.getElementById(\"errorMsg\").style.display = \"block\";\n        document.getElementById(\"loading\").style.display = \"none\";\n        return;\n    }\n\n    try {\n        const data = await fetchData(location);\n        const processedData = processWeatherData(data);\n        updateUI(processedData);\n        currentPage = 1;\n\n        // Set the default location only if it's not already set\n        if (getDefaultLocation() !== location) {\n            setDefaultLocation(location);\n        }\n\n        const forecastData = await fetch7DayForecast(location);\n        update7DayForecast(forecastData);\n\n        updateDateAndTime(location);\n    } catch (error) {\n        document.getElementById(\"errorMsg\").innerText = error;\n        document.getElementById(\"errorMsg\").style.display = \"block\";\n    } finally {\n        document.getElementById(\"loading\").style.display = \"none\";\n        locationInputElement.value = \"\";\n    }\n});\n\n// Initialize the default location on page load\nwindow.addEventListener(\"load\", () => {\n    document.getElementById(\"locationInput\").value = \"\";\n    const defaultLocation = getDefaultLocation();\n    searchAndUpdate(defaultLocation);\n});\n\n// Event listener for the search button\ndocument.getElementById(\"searchButton\").addEventListener(\"click\", () => {\n    document.getElementById(\"locationInput\").value = \"\";\n});\n\n// Rest of your code...\n\n\nconst searchAndUpdate = async (location) => {\n    document.getElementById(\"errorMsg\").style.display = \"none\";\n    document.getElementById(\"loading\").style.display = \"block\";\n\n    if (!location) {\n        document.getElementById(\"errorMsg\").innerText = \"Please provide a location.\";\n        document.getElementById(\"errorMsg\").style.display = \"block\";\n        document.getElementById(\"loading\").style.display = \"none\";\n        return;\n    }\n\n    try {\n        const data = await fetchData(location);\n        const processedData = processWeatherData(data);\n        updateUI(processedData);\n        currentPage = 1;\n\n        const forecastData = await fetch7DayForecast(location);\n        update7DayForecast(forecastData);\n\n        updateDateAndTime(location);\n    } catch (error) {\n        document.getElementById(\"errorMsg\").innerText = error;\n        document.getElementById(\"errorMsg\").style.display = \"block\";\n    } finally {\n        document.getElementById(\"loading\").style.display = \"none\";\n        document.getElementById(\"locationInput\").value = \"\";\n    }\n};\n\ndocument.getElementById(\"searchButton\").addEventListener(\"click\", () => {\n    document.getElementById(\"locationInput\").value = \"\";\n});\n\n\nconst fetch7DayForecast = async (location) => {\n    try {\n        const response = await fetch(\n            `https://api.weatherapi.com/v1/forecast.json?key=${API_KEY}&q=${location}&days=7&aqi=no&alerts=no`\n        );\n        if (!response.ok) {\n            throw new Error('Unable to fetch 7-day forecast data.');\n        }\n        const data = await response.json();\n        return data.forecast.forecastday;\n    } catch (error) {\n        throw error;\n    }\n};\n\nconst update7DayForecast = (forecastData) => {\n    const forecastContainer = document.querySelector('.seven-day-forecast');\n    forecastContainer.innerHTML = '';\n\n    forecastData.forEach((day) => {\n        const forecastElement = document.createElement('div');\n        forecastElement.classList.add('forecast-day');\n\n        const date = new Date(day.date);\n        const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });\n        const iconUrl = day.day.condition.icon;\n        const maxTemp = day.day.maxtemp_c;\n        const minTemp = day.day.mintemp_c;\n\n        forecastElement.innerHTML = `\n            <div class=\"forecast-day-icon\">\n                <img src=\"${iconUrl}\" alt=\"Weather Icon\">\n            </div>\n            <div class=\"forecast-day-info\">\n                <div class=\"forecast-day-name\">${dayOfWeek}</div>\n                <div class=\"forecast-day-temp\">${maxTemp}°C / ${minTemp}°C</div>\n            </div>\n        `;\n\n        forecastContainer.appendChild(forecastElement);\n    });\n};\n\nconst processWeatherData = (data) => {\n    const current = data.current;\n    const forecast = data.forecast.forecastday[0];\n\n    return {\n        location: `${data.location.name}`,\n        temperature: current.temp_c,\n        feelsLike: current.feelslike_c,\n        uv: current.uv,\n        description: current.condition.text,\n        humidity: current.humidity,\n        windSpeed: current.wind_kph,\n        icon: current.condition.icon,\n        daily_chance_of_rain: forecast.day.daily_chance_of_rain,\n        daily_chance_of_snow: forecast.day.daily_chance_of_snow,\n        hourly_forecast: forecast.hour,\n    };\n};\n\nconst updateUI = (data) => {\n    document.getElementById(\"location\").textContent = data.location;\n    document.getElementById(\"temperature\").textContent = `${data.temperature}°C`;\n    document.getElementById(\"feelsLikeValue\").textContent = `${data.feelsLike}°C`;\n    document.getElementById(\"uvIndexValue\").textContent = data.uv;\n    document.getElementById(\"description\").textContent = data.description;\n    document.getElementById(\"humidityValue\").textContent = `${data.humidity}%`;\n    document.getElementById(\"windSpeedValue\").textContent = `${data.windSpeed} kph`;\n    document.getElementById(\"icon\").setAttribute(\"src\", data.icon);\n\n    formatDateAndTime();\n    displayHourlyForecast(data.hourly_forecast);\n\n    document.getElementById(\"rainValue\").textContent = `${data.daily_chance_of_rain}%`;\n    document.getElementById(\"snowValue\").textContent = `${data.daily_chance_of_snow}%`;    \n};\n\nconst formatDateAndTime = () => {\n    const currentDate = new Date();\n    const optionsForDate = { year: 'numeric', month: 'long', day: 'numeric' };\n    const dateString = currentDate.toLocaleDateString('en-US', optionsForDate);\n\n    let hours = currentDate.getHours();\n    const minutes = currentDate.getMinutes();\n    const ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12;\n\n    const timeString = `${hours}:${minutes < 10 ? '0' + minutes : minutes}${ampm}`;\n\n    document.getElementById('currentDate').textContent = `currentDate: ${dateString}`;\n    document.getElementById('currentTime').textContent = `currentTime: ${timeString}`;\n};\n\nconst displayHourlyForecast = (hourlyForecast) => {\n    const forecastContainer = document.getElementById('hourlyForecast');\n    forecastContainer.innerHTML = '';\n\n    const currentDate = new Date();\n    const currentHour = currentDate.getHours();\n    const currentMinute = currentDate.getMinutes();\n\n    let nextHour = currentHour + 1;\n    if (currentMinute < 1) {\n        nextHour = currentHour;\n    }\n\n    hourlyForecast.forEach((hour) => {\n        const hourTimestamp = hour.time_epoch * 1000;\n        const hourDate = new Date(hourTimestamp);\n        const hourValue = hourDate.getHours();\n\n        if (hourValue >= nextHour) {\n            const hourElement = document.createElement('div');\n            hourElement.classList.add('hourly-forecast-item');\n\n            const iconImg = document.createElement('img');\n            iconImg.setAttribute('src', hour.condition.icon);\n            iconImg.setAttribute('alt', 'Weather Icon');\n\n            const formattedTime = `${hourValue % 12}:${hourValue % 12 === 0 ? '00' : '00'} ${hourValue >= 12 ? 'PM' : 'AM'}`;\n\n            const timeSpan = document.createElement('span');\n            timeSpan.textContent = formattedTime;\n\n            const temperatureSpan = document.createElement('span');\n            temperatureSpan.textContent = `${hour.temp_c}°C`;\n\n            hourElement.appendChild(iconImg);\n            hourElement.appendChild(timeSpan);\n            hourElement.appendChild(temperatureSpan);\n            forecastContainer.appendChild(hourElement);\n\n            nextHour++;\n        }\n    });\n};\n\nconst forecastContent = document.getElementById(\"forecast-content\");\n\nconst updateDateAndTime = (location) => {\n    fetch(`https://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=${location}`)\n    .then((response) => response.json())\n    .then((data) => {\n        const date = new Date(data.location.localtime);\n        const optionsForDate = { year: 'numeric', month: 'long', day: 'numeric' };\n        const dateString = date.toLocaleDateString('en-US', optionsForDate);\n\n        let hours = date.getHours();\n        const minutes = date.getMinutes();\n        const ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12;\n\n        const timeString = `${hours}:${minutes < 10 ? '0' + minutes : minutes} ${ampm}`;\n\n        document.getElementById('currentDate').textContent = `${dateString}`;\n        document.getElementById('currentTime').textContent = `${timeString}`;\n    })\n    .catch((error) => {\n        console.error(`Error fetching date and time data for ${location}: ${error.message}`);\n    });\n};\n\n"],"names":["API_KEY","currentPage","getDefaultLocation","localStorage","getItem","fetchData","async","location","url","response","fetch","data","json","error","Error","message","console","document","getElementById","addEventListener","event","preventDefault","style","display","locationInputElement","value","trim","innerText","processedData","processWeatherData","updateUI","setItem","setDefaultLocation","forecastData","fetch7DayForecast","update7DayForecast","updateDateAndTime","window","defaultLocation","searchAndUpdate","ok","forecast","forecastday","forecastContainer","querySelector","innerHTML","forEach","day","forecastElement","createElement","classList","add","dayOfWeek","Date","date","toLocaleDateString","weekday","iconUrl","condition","icon","maxTemp","maxtemp_c","minTemp","mintemp_c","appendChild","current","name","temperature","temp_c","feelsLike","feelslike_c","uv","description","text","humidity","windSpeed","wind_kph","daily_chance_of_rain","daily_chance_of_snow","hourly_forecast","hour","textContent","setAttribute","formatDateAndTime","displayHourlyForecast","currentDate","dateString","year","month","hours","getHours","minutes","getMinutes","ampm","timeString","hourlyForecast","currentHour","currentMinute","nextHour","hourTimestamp","time_epoch","hourValue","hourElement","iconImg","formattedTime","timeSpan","temperatureSpan","then","localtime","catch"],"mappings":"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"}