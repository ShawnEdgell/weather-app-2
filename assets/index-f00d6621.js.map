{"version":3,"file":"index-f00d6621.js","sources":["../../src/modules/api.js","../../src/modules/ui.js","../../src/app.js"],"sourcesContent":["// api.js\nconst API_BASE_URL = \"https://api.weatherapi.com/v1/forecast.json\";\nconst API_KEY = \"219a015ee939448aa0f195825231010\"; // Replace with your WeatherAPI API key\n\nexport const fetchData = async (location = \"Toronto\") => {\n    const url = `${API_BASE_URL}?key=${API_KEY}&q=${location}&days=1&aqi=no&alerts=no`;\n\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n\n        if (data.error) {\n            throw new Error(data.error.message);\n        }\n\n        return data;\n    } catch (error) {\n        console.error(`Error fetching data for ${location}: ${error.message}`);\n        throw error;\n    }\n};\n\nexport const fetchWeeklyForecast = async (location = \"Toronto\") => {\n    const url = `${API_BASE_URL}?key=${API_KEY}&q=${location}&days=7&aqi=no&alerts=no`;\n\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n\n        if (data.error) {\n            throw new Error(data.error.message);\n        }\n\n        return data.forecast.forecastday;\n    } catch (error) {\n        console.error(`Error fetching weekly forecast data for ${location}: ${error.message}`);\n        throw error;\n    }\n};\n\nexport const processWeatherData = (data) => {\n    const current = data.current;\n    const forecast = data.forecast.forecastday[0]; // Assuming you want data for the first day\n\n    return {\n        location: `${data.location.name}, ${data.location.region}, ${data.location.country}`,\n        temperature: current.temp_c,\n        feelsLike: current.feelslike_c,\n        uv: current.uv,\n        description: current.condition.text,\n        humidity: current.humidity,\n        windSpeed: current.wind_kph,\n        icon: current.condition.icon,\n        daily_chance_of_rain: forecast.day.daily_chance_of_rain,\n        daily_chance_of_snow: forecast.day.daily_chance_of_snow,\n        hourly_forecast: forecast.hour,\n    };\n};\n","// ui.js\nexport const updateUI = (data) => {\n    document.getElementById(\"location\").textContent = data.location;\n    document.getElementById(\"temperature\").textContent = `${data.temperature}°C`;\n    document.getElementById(\"feelsLike\").textContent = `Feels like: ${data.feelsLike}°C`;\n    document.getElementById(\"uvIndex\").textContent = `UV Index: ${data.uv}`;\n    document.getElementById(\"description\").textContent = data.description;\n    document.getElementById(\"humidity\").textContent = `Humidity: ${data.humidity}%`;\n    document.getElementById(\"windSpeed\").textContent = `Wind speed: ${data.windSpeed} kph`;\n    document.getElementById(\"icon\").setAttribute(\"src\", data.icon);\n\n    formatDateAndTime(); // Display date and time\n    displayHourlyForecast(data.hourly_forecast); // Display hourly forecast\n\n    // Use the correct field names for chance of rain and snow from your API response\n    const chanceOfRain = data.daily_chance_of_rain;\n    const chanceOfSnow = data.daily_chance_of_snow;\n\n    document.getElementById(\"chanceOfRain\").textContent = `Chance of Rain: ${chanceOfRain}%`;\n    document.getElementById(\"chanceOfSnow\").textContent = `Chance of Snow: ${chanceOfSnow}%`;\n};\n\nconst formatDateAndTime = () => {\n    const currentDate = new Date();\n    const optionsForDate = { year: 'numeric', month: 'long', day: 'numeric' };\n    const dateString = currentDate.toLocaleDateString('en-US', optionsForDate);\n\n    let hours = currentDate.getHours();\n    const minutes = currentDate.getMinutes();\n    const ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n\n    const timeString = `${hours}:${minutes < 10 ? '0' + minutes : minutes}${ampm}`;\n\n    document.getElementById('currentDate').textContent = dateString;\n    document.getElementById('currentTime').textContent = timeString;\n};\n\nconst displayHourlyForecast = (hourlyForecast) => {\n    const forecastContainer = document.getElementById('hourlyForecast');\n    forecastContainer.innerHTML = ''; // Clear previous data\n\n    hourlyForecast.forEach((hour) => {\n        const hourElement = document.createElement('div');\n        hourElement.classList.add('hourly-forecast-item');\n\n        // Format the time to your preferred display format\n        const time = new Date(hour.time).toLocaleTimeString('en-US', {\n            hour: 'numeric',\n            minute: '2-digit',\n            hour12: true,\n        });\n\n        hourElement.textContent = `${time} - ${hour.temp_c}°C`;\n\n        forecastContainer.appendChild(hourElement);\n    });\n};\n","// app.js\nimport { fetchData, processWeatherData } from './modules/api.js'; // Remove fetchWeeklyForecast import as we don't need it\nimport { updateUI } from './modules/ui.js';\n\n// Set the default location to Toronto\nconst defaultLocation = 'Toronto';\n\ndocument.getElementById(\"weatherForm\").addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    // Hide previous error messages\n    document.getElementById(\"errorMsg\").style.display = \"none\";\n\n    // Show loading state\n    document.getElementById(\"loading\").style.display = \"block\";\n\n    // Set the location to the value from the input or the default location\n    const location = document.getElementById(\"locationInput\").value || defaultLocation;\n\n    try {\n        const data = await fetchData(location);\n        const processedData = processWeatherData(data);\n        updateUI(processedData);\n    } catch (error) {\n        // Display the error in the UI\n        document.getElementById(\"errorMsg\").innerText = error;\n        document.getElementById(\"errorMsg\").style.display = \"block\";\n    } finally {\n        // Hide loading state in a finally block to ensure it always hides, even if there's an error\n        document.getElementById(\"loading\").style.display = \"none\";\n    }\n});\n\n// Fetch weather data for default location (Toronto) on page load\n(async () => {\n    const data = await fetchData(defaultLocation);\n    const processedData = processWeatherData(data);\n    updateUI(processedData);\n})();\n"],"names":["fetchData","async","location","url","response","fetch","data","json","error","Error","message","console","processWeatherData","current","forecast","forecastday","name","region","country","temperature","temp_c","feelsLike","feelslike_c","uv","description","condition","text","humidity","windSpeed","wind_kph","icon","daily_chance_of_rain","day","daily_chance_of_snow","hourly_forecast","hour","updateUI","document","getElementById","textContent","setAttribute","formatDateAndTime","displayHourlyForecast","chanceOfRain","chanceOfSnow","currentDate","Date","dateString","toLocaleDateString","year","month","hours","getHours","minutes","getMinutes","ampm","timeString","hourlyForecast","forecastContainer","innerHTML","forEach","hourElement","createElement","classList","add","time","toLocaleTimeString","minute","hour12","appendChild","defaultLocation","addEventListener","event","preventDefault","style","display","value","processedData","innerText"],"mappings":"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"}